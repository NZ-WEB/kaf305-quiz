openapi: 3.0.2
info:
  title: 'Kaf305-quiz'
  version: '0.1'
paths:
  /api/users/:
#      get:
#        operationId: Список пользователей
#        description: ''
#        parameters:
#          - name: page
#            required: false
#            in: query
#            description: Номер страницы.
#            schema:
#              type: integer
#          - name: limit
#            required: false
#            in: query
#            description: Количество объектов на странице.
#            schema:
#              type: integer
#        responses:
#          '200':
#            content:
#              application/json:
#                schema:
#                  type: object
#                  properties:
#                    count:
#                      type: integer
#                      example: 123
#                      description: 'Общее количество объектов в базе'
#                    next:
#                      type: string
#                      nullable: true
#                      format: uri
#                      example: http://kaf305-quiz.example.org/api/users/?page=4
#                      description: 'Ссылка на следующую страницу'
#                    previous:
#                      type: string
#                      nullable: true
#                      format: uri
#                      example: http://kaf305-quiz.example.org/api/users/?page=2
#                      description: 'Ссылка на предыдущую страницу'
#                    results:
#                      type: array
#                      items:
#                        $ref: '#/components/schemas/User'
#                      description: 'Список объектов текущей страницы'
#            description: ''
#        tags:
#          - Пользователи
    post:
      operationId: Регистрация пользователя
      description: ''
      parameters: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomUserCreate'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUserResponseOnCreate'
          description: 'Пользователь успешно создан'
        '400':
          $ref: '#/components/responses/ValidationError'
      tags:
        - Пользователи
  /api/users/{id}/:
    get:
      operationId: Профиль пользователя
      description: 'Доступно всем пользователям.'
      security:
        - Token: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: "Уникальный id этого пользователя"
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/AuthenticationError'
      tags:
        - Пользователи
  /api/users/me/:
    get:
      operationId: Текущий пользователь
      description: ''
      parameters: [ ]
      security:
        - Token: [ ]
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '401':
          $ref: '#/components/responses/AuthenticationError'
      tags:
        - Пользователи
  /api/users/set_password/:
    post:
      operationId: Изменение пароля
      description: 'Изменение пароля текущего пользователя'
      parameters: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPassword'
      responses:
        '204':
          description: 'Пароль успешно изменен'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/AuthenticationError'
      tags:
        - Пользователи
  /api/auth/token/login/:
    post:
      operationId: Получить токен авторизации
      description: Используется для авторизации по емейлу и паролю, чтобы далее использовать токен при запросах.
      parameters: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenCreate'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenGetResponse'
          description: ''
      tags:
        - Пользователи
  /api/auth/token/logout/:
    post:
      operationId: Удаление токена
      description: Удаляет токен текущего пользователя
      parameters: [ ]
      requestBody:
        content:
          application/json:
            schema: { }

      responses:
        '204':
          content:
            application/json:
              schema: { }
          description: ''
        '401':
          $ref: '#/components/responses/AuthenticationError'
      tags:
        - Пользователи
components:
  schemas:
    User:
      description:  'Пользователь (преподаватель/автор теста)'
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 254
          description: "Адрес электронной почты"
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: "Уникальный юзернейм"
          pattern: ^[\w.@+-]+\z
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
          description: "Имя"
          example: "Вася"
        last_name:
          type: string
          maxLength: 150
          description: "Фамилия"
          example: "Пупкин"
      required:
        - username
        - id
    CustomUserCreate:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 254
          description: "Адрес электронной почты"
          example: "vpupkin@yandex.ru"
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: "Уникальный юзернейм"
          pattern: ^[\w.@+-]+\z
          maxLength: 150
          example: "vasya.pupkin"
        first_name:
          type: string
          maxLength: 150
          description: "Имя"
          example: "Вася"
        last_name:
          type: string
          maxLength: 150
          description: "Фамилия"
          example: "Пупкин"
        password:
          type: string
          maxLength: 150
          description: "Пароль"
          example: "Qwerty123"
      required:
        - username
        - password
        - first_name
        - last_name
        - email
    SetPassword:
      type: object
      properties:
        new_password:
          type: string
        current_password:
          type: string
      required:
        - new_password
        - current_password
    TokenCreate:
      type: object
      properties:
        password:
          type: string
        email:
          type: string
    TokenGetResponse:
      type: object
      properties:
        auth_token:
          type: string
    CustomUserResponseOnCreate:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 254
          description: "Адрес электронной почты"
          example: "vpupkin@yandex.ru"
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: "Уникальный юзернейм"
          pattern: ^[\w.@+-]+\z
          maxLength: 150
          example: "vasya.pupkin"
        first_name:
          type: string
          maxLength: 150
          description: "Имя"
          example: "Вася"
        last_name:
          type: string
          maxLength: 150
          description: "Фамилия"
          example: "Пупкин"
      required:
        - username
        - first_name
        - last_name
        - email

    Student:
      description: 'Учащийтя (проходящий тестирование)'
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string;
          example: 'Иван'
        secondName:
          type: string
          example: 'Иванов'
        rating:
          type: integer
          default: 0
        groupNumber:
          type: string
          example: 'М3О-304С-19'
      required:
        - id
        - firstName
        - secondName
        - rating
    StudentCreate:
      type: object
      description: 'Входные данные студента при входе в систему тестирования (квиз)'
      properties:
        firstName:
          type: string
        secondName:
          type: string
        groupNumber:
          type: string
      required:
        - firstName
        - secondName

    Event:
      type: object
      description: 'Один тест (квиз / мероприятие)'
      properties:
        slug:
          description: 'Уникальная строка события'
          type: string
        title:
          type: string
          description: 'Заголовок'
        description:
          type: string
          description: 'Описание события'
        items:
          type: array
          items:
            $ref: '#/components/schemas/QuizQuestionItem'
        author:
          type: object
          $ref: '#/components/schemas/User'
        students:
          type: array
          items:
            $ref: '#/components/schemas/Student'
        link:
          type: string
          description: 'уникальная ссылка события'
        stage:
          type: integer
          description: 'Номер стадии (порядковый номер активного вопроса)'
        status:
          type: string
          description: 'Статус мероприятия (В процессе / Остановлено / В ожидании начала)'
          default: 'pending'
    EventCurrentStage:
      type: object
      default: 'Конкретная стадия мероприятия'
      properties:
        currentStage:
          type: number
        question:
          type: object
          $ref: '#/components/schemas/QuizQuestionItem'

    AnswerOption:
      type: object
      description: 'Один вариант ответа'
      properties:
        id:
          type: string
        text:
          type: string
    QuizQuestionItem:
      description: 'Один вопрос с вариантами ответов'
      type: object
      properties:
        question:
          type: string
          description: "Вопрос в текстовом виде"
        answerOptions:
          type: array
          items:
            $ref: '#/components/schemas/AnswerOption'
        backgroundImageUrl:
          type: string
          description: 'Фоновый рисунок вопроса'
        answersLength:
          type: integer
          description: 'Колличество вариантов ответа'
        timer:
          description: 'Время на один вопрос в секундах'
          type: number
          default: 30
      required:
        - question
        - answerOptions
        - timer

    ValidationError:
      description: Стандартные ошибки валидации DRF
      type: object
      properties:
        field_name:
          description: 'Название поля, в котором произошли ошибки. Таких полей может быть несколько'
          example: [ 'Обязательное поле.' ]
          type: array
          items:
            type: string
    NestedValidationError:
      description: Стандартные ошибки валидации DRF
      type: object
      properties:
        ingredients:
          description: 'Ошибки в ингредиентах. В приведенном примере в первом и третьем ингредиенте не было ошибок (amount >= 1), а во втором были.'
          example: [ { },{ "amount": [ "Убедитесь, что это значение больше либо равно 1." ] }, { } ]
          type: array
          items:
            type: object
            properties:
              amount:
                type: array
                items:
                  type: string
    AuthenticationError:
      description: Пользователь не авторизован
      type: object
      properties:
        detail:
          description: 'Описание ошибки'
          example: "Учетные данные не были предоставлены."
          type: string
    PermissionDenied:
      description: Недостаточно прав
      type: object
      properties:
        detail:
          description: 'Описание ошибки'
          example: "У вас недостаточно прав для выполнения данного действия."
          type: string
    NotFound:
      description: Объект не найден
      type: object
      properties:
        detail:
          description: 'Описание ошибки'
          example: "Страница не найдена."
          type: string
  responses:
    ValidationError:
      description: 'Ошибки валидации в стандартном формате DRF'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
    NestedValidationError:
      description: 'Ошибки валидации в стандартном формате DRF, в том числе с внутренними элементами.'
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/NestedValidationError'
              - $ref: '#/components/schemas/ValidationError'


    AuthenticationError:
      description: Пользователь не авторизован
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthenticationError'
    PermissionDenied:
      description: Недостаточно прав
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PermissionDenied'
    NotFound:
      description: Объект не найден
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFound'